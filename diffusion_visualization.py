from abc import abstractmethod
from diffusion import DiffusionAbstract


class DiffusionVisualization(DiffusionAbstract):
    """Abstract class for visualizing diffusion simulations"""

    @abstractmethod
    def plot_target_data(self):
        """Show the target data/dsn
        Uses data from self.target_data()"""

    @abstractmethod
    def plot_diffusion(self):
        """Show diffusion trajectories
        Uses data from self.diffuse()
            * self.forward_process()
            * self.backward_process()"""

    @abstractmethod
    def plot_generated_data(self):
        """Show the data generated by diffusion
        Uses data from self.diffuse()
            * self.backward_process()"""

    @abstractmethod
    def plot_score_estimate_quality(self):
        """Show the quality of the score function
            * KL divergence for analytic starting dsns
            * Loss function for score fns learned with NNs
        Uses data from self.calc_score()
        """
